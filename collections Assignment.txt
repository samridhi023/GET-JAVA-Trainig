Write a Java program to create a new array list, add some colors (string) and print out the collection.
  -  iterate through all elements in a array list.
	- insert an element into the array list at the first position.
	- retrieve an element (at a specified index) from a given array list.
	- update specific array element by given element.
	-  remove the third element from a array list. 
	- search an element in a array list.
 	-  sort a given array list.
  - copy one array list into another.
	- shuffle elements in a array list. 
	- reverse elements in a array list.
 	- extract a portion of a array list.
	- replace the second element of a ArrayList with the specified element






import java.util.ArrayList;
import java.util.Collections;

public class ArrayListExample {
    public static void main(String[] args) {
        // 1. Create a new array list and add some colors
        ArrayList<String> colors = new ArrayList<>();
        colors.add("Red");
        colors.add("Green");
        colors.add("Blue");
        colors.add("Yellow");
        colors.add("Black");

        // Print out the collection
        System.out.println("Original ArrayList: " + colors);

        // 2. Iterate through all elements
        System.out.println("\nIterating through ArrayList:");
        for (String color : colors) {
            System.out.println(color);
        }

        // 3. Insert an element at the first position
        colors.add(0, "White");
        System.out.println("\nAfter inserting 'White' at first position: " + colors);

        // 4. Retrieve an element at a specified index
        String elementAt3 = colors.get(3);
        System.out.println("\nElement at index 3: " + elementAt3);

        // 5. Update specific array element
        colors.set(2, "Orange");
        System.out.println("\nAfter updating index 2 with 'Orange': " + colors);

        // 6. Remove the third element
        colors.remove(2);
        System.out.println("\nAfter removing the 3rd element: " + colors);

        // 7. Search for an element
        String searchElement = "Blue";
        if (colors.contains(searchElement)) {
            System.out.println("\nArrayList contains: " + searchElement);
        } else {
            System.out.println("\nArrayList does not contain: " + searchElement);
        }

        // 8. Sort a given array list
        Collections.sort(colors);
        System.out.println("\nSorted ArrayList: " + colors);

        // 9. Copy one array list into another
        ArrayList<String> copyList = new ArrayList<>(colors);
        System.out.println("\nCopied ArrayList: " + copyList);

        // 10. Shuffle elements in a array list
        Collections.shuffle(colors);
        System.out.println("\nShuffled ArrayList: " + colors);

        // 11. Reverse elements in a array list
        Collections.reverse(colors);
        System.out.println("\nReversed ArrayList: " + colors);

        // 12. Extract a portion of a array list
        ArrayList<String> subList = new ArrayList<>(colors.subList(1, 4));
        System.out.println("\nExtracted portion (index 1 to 3): " + subList);

        // 13. Replace the second element with a specified element
        colors.set(1, "Pink");
        System.out.println("\nAfter replacing second element with 'Pink': " + colors);
    }
}



2)Write a Java code to Perform Set Operations using 2 HashSet
  
-Union -- using addAll()
In this, we could simply add one Set with other. Since the Set will itself not allow any duplicate entries, we need not take care of the common values.
Expected Output:
Union : [0, 1, 2, 3, 4, 5, 7, 8, 9]
 
 -Intersection - using retainAll()
We just need to retain the common values from both Sets.
Expected Output:
Intersection : [0, 1, 3, 4]
 
 -Difference - using removeAll()
We just need to remove all the values of one Set from the other.

Expected Output:
Difference : [2, 8, 9]


import java.util.HashSet;

public class SetOperations {
    public static void main(String[] args) {
        // First HashSet
        HashSet<Integer> set1 = new HashSet<>();
        set1.add(0);
        set1.add(1);
        set1.add(2);
        set1.add(3);
        set1.add(4);
        set1.add(8);
        set1.add(9);

        // Second HashSet
        HashSet<Integer> set2 = new HashSet<>();
        set2.add(0);
        set2.add(1);
        set2.add(3);
        set2.add(4);
        set2.add(5);
        set2.add(7);

        System.out.println("Set1: " + set1);
        System.out.println("Set2: " + set2);

        // 1. Union (using addAll)
        HashSet<Integer> union = new HashSet<>(set1);
        union.addAll(set2);
        System.out.println("\nUnion : " + union);

        // 2. Intersection (using retainAll)
        HashSet<Integer> intersection = new HashSet<>(set1);
        intersection.retainAll(set2);
        System.out.println("Intersection : " + intersection);

        // 3. Difference (using removeAll)
        HashSet<Integer> difference = new HashSet<>(set1);
        difference.removeAll(set2);
        System.out.println("Difference : " + difference);
    }
}


3) Java program to Create and work with a HashMap of userdefined Object 'Employee'as value consisting id,name & city fields as follows.

 *Map<Integer, Employee> employeesMap = new HashMap<>();*

 - Add 5 employees and display it.
 - Display Employee details based on Employee Id(key field).





import java.util.HashMap;
import java.util.Map;

// Employee class
class Employee {
    private int id;
    private String name;
    private String city;

    // Constructor
    public Employee(int id, String name, String city) {
        this.id = id;
        this.name = name;
        this.city = city;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getCity() {
        return city;
    }

    // To display Employee details
    @Override
    public String toString() {
        return "Employee{id=" + id + ", name='" + name + "', city='" + city + "'}";
    }
}

public class EmployeeHashMapExample {
    public static void main(String[] args) {
        // Create a HashMap with Employee ID as Key and Employee Object as Value
        Map<Integer, Employee> employeesMap = new HashMap<>();

        // Add 5 employees
        employeesMap.put(101, new Employee(101, "Alice", "Delhi"));
        employeesMap.put(102, new Employee(102, "Bob", "Mumbai"));
        employeesMap.put(103, new Employee(103, "Charlie", "Bangalore"));
        employeesMap.put(104, new Employee(104, "David", "Hyderabad"));
        employeesMap.put(105, new Employee(105, "Eve", "Chennai"));

        // Display all employees
        System.out.println("All Employees:");
        for (Map.Entry<Integer, Employee> entry : employeesMap.entrySet()) {
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }

        // Display employee details based on Employee Id
        int searchId = 103;  // you can change this id
        System.out.println("\nDetails of Employee with ID " + searchId + ":");
        Employee emp = employeesMap.get(searchId);
        if (emp != null) {
            System.out.println(emp);
        } else {
            System.out.println("Employee with ID " + searchId + " not found!");
        }
    }
}









